// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: experience.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_experience_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_experience_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_experience_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_experience_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_experience_2eproto;
namespace atari_prediction {
class ExperienceBuffer;
struct ExperienceBufferDefaultTypeInternal;
extern ExperienceBufferDefaultTypeInternal _ExperienceBuffer_default_instance_;
class ExperienceBuffer_Experience;
struct ExperienceBuffer_ExperienceDefaultTypeInternal;
extern ExperienceBuffer_ExperienceDefaultTypeInternal _ExperienceBuffer_Experience_default_instance_;
}  // namespace atari_prediction
PROTOBUF_NAMESPACE_OPEN
template<> ::atari_prediction::ExperienceBuffer* Arena::CreateMaybeMessage<::atari_prediction::ExperienceBuffer>(Arena*);
template<> ::atari_prediction::ExperienceBuffer_Experience* Arena::CreateMaybeMessage<::atari_prediction::ExperienceBuffer_Experience>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace atari_prediction {

// ===================================================================

class ExperienceBuffer_Experience final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:atari_prediction.ExperienceBuffer.Experience) */ {
 public:
  inline ExperienceBuffer_Experience() : ExperienceBuffer_Experience(nullptr) {}
  ~ExperienceBuffer_Experience() override;
  explicit constexpr ExperienceBuffer_Experience(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExperienceBuffer_Experience(const ExperienceBuffer_Experience& from);
  ExperienceBuffer_Experience(ExperienceBuffer_Experience&& from) noexcept
    : ExperienceBuffer_Experience() {
    *this = ::std::move(from);
  }

  inline ExperienceBuffer_Experience& operator=(const ExperienceBuffer_Experience& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExperienceBuffer_Experience& operator=(ExperienceBuffer_Experience&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExperienceBuffer_Experience& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExperienceBuffer_Experience* internal_default_instance() {
    return reinterpret_cast<const ExperienceBuffer_Experience*>(
               &_ExperienceBuffer_Experience_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ExperienceBuffer_Experience& a, ExperienceBuffer_Experience& b) {
    a.Swap(&b);
  }
  inline void Swap(ExperienceBuffer_Experience* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExperienceBuffer_Experience* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExperienceBuffer_Experience* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExperienceBuffer_Experience>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExperienceBuffer_Experience& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExperienceBuffer_Experience& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExperienceBuffer_Experience* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atari_prediction.ExperienceBuffer.Experience";
  }
  protected:
  explicit ExperienceBuffer_Experience(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSensorReadingFieldNumber = 2,
    kRewardFieldNumber = 1,
    kDoneFieldNumber = 3,
    kActionFieldNumber = 4,
  };
  // repeated float sensor_reading = 2;
  int sensor_reading_size() const;
  private:
  int _internal_sensor_reading_size() const;
  public:
  void clear_sensor_reading();
  private:
  float _internal_sensor_reading(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_sensor_reading() const;
  void _internal_add_sensor_reading(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_sensor_reading();
  public:
  float sensor_reading(int index) const;
  void set_sensor_reading(int index, float value);
  void add_sensor_reading(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      sensor_reading() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_sensor_reading();

  // required float reward = 1;
  bool has_reward() const;
  private:
  bool _internal_has_reward() const;
  public:
  void clear_reward();
  float reward() const;
  void set_reward(float value);
  private:
  float _internal_reward() const;
  void _internal_set_reward(float value);
  public:

  // required bool done = 3;
  bool has_done() const;
  private:
  bool _internal_has_done() const;
  public:
  void clear_done();
  bool done() const;
  void set_done(bool value);
  private:
  bool _internal_done() const;
  void _internal_set_done(bool value);
  public:

  // required int32 action = 4;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  int32_t action() const;
  void set_action(int32_t value);
  private:
  int32_t _internal_action() const;
  void _internal_set_action(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:atari_prediction.ExperienceBuffer.Experience)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > sensor_reading_;
  float reward_;
  bool done_;
  int32_t action_;
  friend struct ::TableStruct_experience_2eproto;
};
// -------------------------------------------------------------------

class ExperienceBuffer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:atari_prediction.ExperienceBuffer) */ {
 public:
  inline ExperienceBuffer() : ExperienceBuffer(nullptr) {}
  ~ExperienceBuffer() override;
  explicit constexpr ExperienceBuffer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExperienceBuffer(const ExperienceBuffer& from);
  ExperienceBuffer(ExperienceBuffer&& from) noexcept
    : ExperienceBuffer() {
    *this = ::std::move(from);
  }

  inline ExperienceBuffer& operator=(const ExperienceBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExperienceBuffer& operator=(ExperienceBuffer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExperienceBuffer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExperienceBuffer* internal_default_instance() {
    return reinterpret_cast<const ExperienceBuffer*>(
               &_ExperienceBuffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ExperienceBuffer& a, ExperienceBuffer& b) {
    a.Swap(&b);
  }
  inline void Swap(ExperienceBuffer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExperienceBuffer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExperienceBuffer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExperienceBuffer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExperienceBuffer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExperienceBuffer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExperienceBuffer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atari_prediction.ExperienceBuffer";
  }
  protected:
  explicit ExperienceBuffer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ExperienceBuffer_Experience Experience;

  // accessors -------------------------------------------------------

  enum : int {
    kExperiencesFieldNumber = 1,
    kEnviromentNameFieldNumber = 2,
    kPolicyTypeFieldNumber = 3,
  };
  // repeated .atari_prediction.ExperienceBuffer.Experience experiences = 1;
  int experiences_size() const;
  private:
  int _internal_experiences_size() const;
  public:
  void clear_experiences();
  ::atari_prediction::ExperienceBuffer_Experience* mutable_experiences(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::atari_prediction::ExperienceBuffer_Experience >*
      mutable_experiences();
  private:
  const ::atari_prediction::ExperienceBuffer_Experience& _internal_experiences(int index) const;
  ::atari_prediction::ExperienceBuffer_Experience* _internal_add_experiences();
  public:
  const ::atari_prediction::ExperienceBuffer_Experience& experiences(int index) const;
  ::atari_prediction::ExperienceBuffer_Experience* add_experiences();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::atari_prediction::ExperienceBuffer_Experience >&
      experiences() const;

  // optional string enviroment_name = 2;
  bool has_enviroment_name() const;
  private:
  bool _internal_has_enviroment_name() const;
  public:
  void clear_enviroment_name();
  const std::string& enviroment_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_enviroment_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_enviroment_name();
  PROTOBUF_NODISCARD std::string* release_enviroment_name();
  void set_allocated_enviroment_name(std::string* enviroment_name);
  private:
  const std::string& _internal_enviroment_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_enviroment_name(const std::string& value);
  std::string* _internal_mutable_enviroment_name();
  public:

  // optional string policy_type = 3;
  bool has_policy_type() const;
  private:
  bool _internal_has_policy_type() const;
  public:
  void clear_policy_type();
  const std::string& policy_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_policy_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_policy_type();
  PROTOBUF_NODISCARD std::string* release_policy_type();
  void set_allocated_policy_type(std::string* policy_type);
  private:
  const std::string& _internal_policy_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy_type(const std::string& value);
  std::string* _internal_mutable_policy_type();
  public:

  // @@protoc_insertion_point(class_scope:atari_prediction.ExperienceBuffer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::atari_prediction::ExperienceBuffer_Experience > experiences_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enviroment_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr policy_type_;
  friend struct ::TableStruct_experience_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ExperienceBuffer_Experience

// required float reward = 1;
inline bool ExperienceBuffer_Experience::_internal_has_reward() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ExperienceBuffer_Experience::has_reward() const {
  return _internal_has_reward();
}
inline void ExperienceBuffer_Experience::clear_reward() {
  reward_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float ExperienceBuffer_Experience::_internal_reward() const {
  return reward_;
}
inline float ExperienceBuffer_Experience::reward() const {
  // @@protoc_insertion_point(field_get:atari_prediction.ExperienceBuffer.Experience.reward)
  return _internal_reward();
}
inline void ExperienceBuffer_Experience::_internal_set_reward(float value) {
  _has_bits_[0] |= 0x00000001u;
  reward_ = value;
}
inline void ExperienceBuffer_Experience::set_reward(float value) {
  _internal_set_reward(value);
  // @@protoc_insertion_point(field_set:atari_prediction.ExperienceBuffer.Experience.reward)
}

// repeated float sensor_reading = 2;
inline int ExperienceBuffer_Experience::_internal_sensor_reading_size() const {
  return sensor_reading_.size();
}
inline int ExperienceBuffer_Experience::sensor_reading_size() const {
  return _internal_sensor_reading_size();
}
inline void ExperienceBuffer_Experience::clear_sensor_reading() {
  sensor_reading_.Clear();
}
inline float ExperienceBuffer_Experience::_internal_sensor_reading(int index) const {
  return sensor_reading_.Get(index);
}
inline float ExperienceBuffer_Experience::sensor_reading(int index) const {
  // @@protoc_insertion_point(field_get:atari_prediction.ExperienceBuffer.Experience.sensor_reading)
  return _internal_sensor_reading(index);
}
inline void ExperienceBuffer_Experience::set_sensor_reading(int index, float value) {
  sensor_reading_.Set(index, value);
  // @@protoc_insertion_point(field_set:atari_prediction.ExperienceBuffer.Experience.sensor_reading)
}
inline void ExperienceBuffer_Experience::_internal_add_sensor_reading(float value) {
  sensor_reading_.Add(value);
}
inline void ExperienceBuffer_Experience::add_sensor_reading(float value) {
  _internal_add_sensor_reading(value);
  // @@protoc_insertion_point(field_add:atari_prediction.ExperienceBuffer.Experience.sensor_reading)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ExperienceBuffer_Experience::_internal_sensor_reading() const {
  return sensor_reading_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ExperienceBuffer_Experience::sensor_reading() const {
  // @@protoc_insertion_point(field_list:atari_prediction.ExperienceBuffer.Experience.sensor_reading)
  return _internal_sensor_reading();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ExperienceBuffer_Experience::_internal_mutable_sensor_reading() {
  return &sensor_reading_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ExperienceBuffer_Experience::mutable_sensor_reading() {
  // @@protoc_insertion_point(field_mutable_list:atari_prediction.ExperienceBuffer.Experience.sensor_reading)
  return _internal_mutable_sensor_reading();
}

// required bool done = 3;
inline bool ExperienceBuffer_Experience::_internal_has_done() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ExperienceBuffer_Experience::has_done() const {
  return _internal_has_done();
}
inline void ExperienceBuffer_Experience::clear_done() {
  done_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ExperienceBuffer_Experience::_internal_done() const {
  return done_;
}
inline bool ExperienceBuffer_Experience::done() const {
  // @@protoc_insertion_point(field_get:atari_prediction.ExperienceBuffer.Experience.done)
  return _internal_done();
}
inline void ExperienceBuffer_Experience::_internal_set_done(bool value) {
  _has_bits_[0] |= 0x00000002u;
  done_ = value;
}
inline void ExperienceBuffer_Experience::set_done(bool value) {
  _internal_set_done(value);
  // @@protoc_insertion_point(field_set:atari_prediction.ExperienceBuffer.Experience.done)
}

// required int32 action = 4;
inline bool ExperienceBuffer_Experience::_internal_has_action() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ExperienceBuffer_Experience::has_action() const {
  return _internal_has_action();
}
inline void ExperienceBuffer_Experience::clear_action() {
  action_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t ExperienceBuffer_Experience::_internal_action() const {
  return action_;
}
inline int32_t ExperienceBuffer_Experience::action() const {
  // @@protoc_insertion_point(field_get:atari_prediction.ExperienceBuffer.Experience.action)
  return _internal_action();
}
inline void ExperienceBuffer_Experience::_internal_set_action(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  action_ = value;
}
inline void ExperienceBuffer_Experience::set_action(int32_t value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:atari_prediction.ExperienceBuffer.Experience.action)
}

// -------------------------------------------------------------------

// ExperienceBuffer

// optional string enviroment_name = 2;
inline bool ExperienceBuffer::_internal_has_enviroment_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ExperienceBuffer::has_enviroment_name() const {
  return _internal_has_enviroment_name();
}
inline void ExperienceBuffer::clear_enviroment_name() {
  enviroment_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ExperienceBuffer::enviroment_name() const {
  // @@protoc_insertion_point(field_get:atari_prediction.ExperienceBuffer.enviroment_name)
  return _internal_enviroment_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExperienceBuffer::set_enviroment_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 enviroment_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:atari_prediction.ExperienceBuffer.enviroment_name)
}
inline std::string* ExperienceBuffer::mutable_enviroment_name() {
  std::string* _s = _internal_mutable_enviroment_name();
  // @@protoc_insertion_point(field_mutable:atari_prediction.ExperienceBuffer.enviroment_name)
  return _s;
}
inline const std::string& ExperienceBuffer::_internal_enviroment_name() const {
  return enviroment_name_.Get();
}
inline void ExperienceBuffer::_internal_set_enviroment_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  enviroment_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExperienceBuffer::_internal_mutable_enviroment_name() {
  _has_bits_[0] |= 0x00000001u;
  return enviroment_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExperienceBuffer::release_enviroment_name() {
  // @@protoc_insertion_point(field_release:atari_prediction.ExperienceBuffer.enviroment_name)
  if (!_internal_has_enviroment_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = enviroment_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (enviroment_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    enviroment_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ExperienceBuffer::set_allocated_enviroment_name(std::string* enviroment_name) {
  if (enviroment_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  enviroment_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), enviroment_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (enviroment_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    enviroment_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:atari_prediction.ExperienceBuffer.enviroment_name)
}

// optional string policy_type = 3;
inline bool ExperienceBuffer::_internal_has_policy_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ExperienceBuffer::has_policy_type() const {
  return _internal_has_policy_type();
}
inline void ExperienceBuffer::clear_policy_type() {
  policy_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ExperienceBuffer::policy_type() const {
  // @@protoc_insertion_point(field_get:atari_prediction.ExperienceBuffer.policy_type)
  return _internal_policy_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExperienceBuffer::set_policy_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 policy_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:atari_prediction.ExperienceBuffer.policy_type)
}
inline std::string* ExperienceBuffer::mutable_policy_type() {
  std::string* _s = _internal_mutable_policy_type();
  // @@protoc_insertion_point(field_mutable:atari_prediction.ExperienceBuffer.policy_type)
  return _s;
}
inline const std::string& ExperienceBuffer::_internal_policy_type() const {
  return policy_type_.Get();
}
inline void ExperienceBuffer::_internal_set_policy_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  policy_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExperienceBuffer::_internal_mutable_policy_type() {
  _has_bits_[0] |= 0x00000002u;
  return policy_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExperienceBuffer::release_policy_type() {
  // @@protoc_insertion_point(field_release:atari_prediction.ExperienceBuffer.policy_type)
  if (!_internal_has_policy_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = policy_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (policy_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    policy_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ExperienceBuffer::set_allocated_policy_type(std::string* policy_type) {
  if (policy_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  policy_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), policy_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (policy_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    policy_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:atari_prediction.ExperienceBuffer.policy_type)
}

// repeated .atari_prediction.ExperienceBuffer.Experience experiences = 1;
inline int ExperienceBuffer::_internal_experiences_size() const {
  return experiences_.size();
}
inline int ExperienceBuffer::experiences_size() const {
  return _internal_experiences_size();
}
inline void ExperienceBuffer::clear_experiences() {
  experiences_.Clear();
}
inline ::atari_prediction::ExperienceBuffer_Experience* ExperienceBuffer::mutable_experiences(int index) {
  // @@protoc_insertion_point(field_mutable:atari_prediction.ExperienceBuffer.experiences)
  return experiences_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::atari_prediction::ExperienceBuffer_Experience >*
ExperienceBuffer::mutable_experiences() {
  // @@protoc_insertion_point(field_mutable_list:atari_prediction.ExperienceBuffer.experiences)
  return &experiences_;
}
inline const ::atari_prediction::ExperienceBuffer_Experience& ExperienceBuffer::_internal_experiences(int index) const {
  return experiences_.Get(index);
}
inline const ::atari_prediction::ExperienceBuffer_Experience& ExperienceBuffer::experiences(int index) const {
  // @@protoc_insertion_point(field_get:atari_prediction.ExperienceBuffer.experiences)
  return _internal_experiences(index);
}
inline ::atari_prediction::ExperienceBuffer_Experience* ExperienceBuffer::_internal_add_experiences() {
  return experiences_.Add();
}
inline ::atari_prediction::ExperienceBuffer_Experience* ExperienceBuffer::add_experiences() {
  ::atari_prediction::ExperienceBuffer_Experience* _add = _internal_add_experiences();
  // @@protoc_insertion_point(field_add:atari_prediction.ExperienceBuffer.experiences)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::atari_prediction::ExperienceBuffer_Experience >&
ExperienceBuffer::experiences() const {
  // @@protoc_insertion_point(field_list:atari_prediction.ExperienceBuffer.experiences)
  return experiences_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace atari_prediction

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_experience_2eproto
