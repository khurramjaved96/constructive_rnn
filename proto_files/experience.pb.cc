// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: experience.proto

#include "experience.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace atari_prediction {
constexpr ExperienceBuffer_Experience::ExperienceBuffer_Experience(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sensor_reading_()
  , reward_(0)
  , done_(false)
  , action_(0){}
struct ExperienceBuffer_ExperienceDefaultTypeInternal {
  constexpr ExperienceBuffer_ExperienceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExperienceBuffer_ExperienceDefaultTypeInternal() {}
  union {
    ExperienceBuffer_Experience _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExperienceBuffer_ExperienceDefaultTypeInternal _ExperienceBuffer_Experience_default_instance_;
constexpr ExperienceBuffer::ExperienceBuffer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : experiences_()
  , enviroment_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , policy_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ExperienceBufferDefaultTypeInternal {
  constexpr ExperienceBufferDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExperienceBufferDefaultTypeInternal() {}
  union {
    ExperienceBuffer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExperienceBufferDefaultTypeInternal _ExperienceBuffer_default_instance_;
}  // namespace atari_prediction
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_experience_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_experience_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_experience_2eproto = nullptr;

const uint32_t TableStruct_experience_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::atari_prediction::ExperienceBuffer_Experience, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::atari_prediction::ExperienceBuffer_Experience, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::atari_prediction::ExperienceBuffer_Experience, reward_),
  PROTOBUF_FIELD_OFFSET(::atari_prediction::ExperienceBuffer_Experience, sensor_reading_),
  PROTOBUF_FIELD_OFFSET(::atari_prediction::ExperienceBuffer_Experience, done_),
  PROTOBUF_FIELD_OFFSET(::atari_prediction::ExperienceBuffer_Experience, action_),
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::atari_prediction::ExperienceBuffer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::atari_prediction::ExperienceBuffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::atari_prediction::ExperienceBuffer, enviroment_name_),
  PROTOBUF_FIELD_OFFSET(::atari_prediction::ExperienceBuffer, policy_type_),
  PROTOBUF_FIELD_OFFSET(::atari_prediction::ExperienceBuffer, experiences_),
  0,
  1,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::atari_prediction::ExperienceBuffer_Experience)},
  { 14, 23, -1, sizeof(::atari_prediction::ExperienceBuffer)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atari_prediction::_ExperienceBuffer_Experience_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atari_prediction::_ExperienceBuffer_default_instance_),
};

const char descriptor_table_protodef_experience_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020experience.proto\022\020atari_prediction\"\330\001\n"
  "\020ExperienceBuffer\022\027\n\017enviroment_name\030\002 \001"
  "(\t\022\023\n\013policy_type\030\003 \001(\t\022B\n\013experiences\030\001"
  " \003(\0132-.atari_prediction.ExperienceBuffer"
  ".Experience\032R\n\nExperience\022\016\n\006reward\030\001 \002("
  "\002\022\026\n\016sensor_reading\030\002 \003(\002\022\014\n\004done\030\003 \002(\010\022"
  "\016\n\006action\030\004 \002(\005"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_experience_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_experience_2eproto = {
  false, false, 255, descriptor_table_protodef_experience_2eproto, "experience.proto", 
  &descriptor_table_experience_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_experience_2eproto::offsets,
  file_level_metadata_experience_2eproto, file_level_enum_descriptors_experience_2eproto, file_level_service_descriptors_experience_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_experience_2eproto_getter() {
  return &descriptor_table_experience_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_experience_2eproto(&descriptor_table_experience_2eproto);
namespace atari_prediction {

// ===================================================================

class ExperienceBuffer_Experience::_Internal {
 public:
  using HasBits = decltype(std::declval<ExperienceBuffer_Experience>()._has_bits_);
  static void set_has_reward(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_done(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

ExperienceBuffer_Experience::ExperienceBuffer_Experience(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sensor_reading_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:atari_prediction.ExperienceBuffer.Experience)
}
ExperienceBuffer_Experience::ExperienceBuffer_Experience(const ExperienceBuffer_Experience& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      sensor_reading_(from.sensor_reading_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&reward_, &from.reward_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&reward_)) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:atari_prediction.ExperienceBuffer.Experience)
}

inline void ExperienceBuffer_Experience::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reward_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&reward_)) + sizeof(action_));
}

ExperienceBuffer_Experience::~ExperienceBuffer_Experience() {
  // @@protoc_insertion_point(destructor:atari_prediction.ExperienceBuffer.Experience)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExperienceBuffer_Experience::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ExperienceBuffer_Experience::ArenaDtor(void* object) {
  ExperienceBuffer_Experience* _this = reinterpret_cast< ExperienceBuffer_Experience* >(object);
  (void)_this;
}
void ExperienceBuffer_Experience::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExperienceBuffer_Experience::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExperienceBuffer_Experience::Clear() {
// @@protoc_insertion_point(message_clear_start:atari_prediction.ExperienceBuffer.Experience)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_reading_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&reward_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&action_) -
        reinterpret_cast<char*>(&reward_)) + sizeof(action_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExperienceBuffer_Experience::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required float reward = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_reward(&has_bits);
          reward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float sensor_reading = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_sensor_reading(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_sensor_reading(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool done = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_done(&has_bits);
          done_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_action(&has_bits);
          action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExperienceBuffer_Experience::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atari_prediction.ExperienceBuffer.Experience)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float reward = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_reward(), target);
  }

  // repeated float sensor_reading = 2;
  for (int i = 0, n = this->_internal_sensor_reading_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_sensor_reading(i), target);
  }

  // required bool done = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_done(), target);
  }

  // required int32 action = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atari_prediction.ExperienceBuffer.Experience)
  return target;
}

size_t ExperienceBuffer_Experience::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:atari_prediction.ExperienceBuffer.Experience)
  size_t total_size = 0;

  if (_internal_has_reward()) {
    // required float reward = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_done()) {
    // required bool done = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_action()) {
    // required int32 action = 4;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_action());
  }

  return total_size;
}
size_t ExperienceBuffer_Experience::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atari_prediction.ExperienceBuffer.Experience)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float reward = 1;
    total_size += 1 + 4;

    // required bool done = 3;
    total_size += 1 + 1;

    // required int32 action = 4;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_action());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float sensor_reading = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_sensor_reading_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sensor_reading_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExperienceBuffer_Experience::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExperienceBuffer_Experience::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExperienceBuffer_Experience::GetClassData() const { return &_class_data_; }

void ExperienceBuffer_Experience::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExperienceBuffer_Experience *>(to)->MergeFrom(
      static_cast<const ExperienceBuffer_Experience &>(from));
}


void ExperienceBuffer_Experience::MergeFrom(const ExperienceBuffer_Experience& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atari_prediction.ExperienceBuffer.Experience)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  sensor_reading_.MergeFrom(from.sensor_reading_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      reward_ = from.reward_;
    }
    if (cached_has_bits & 0x00000002u) {
      done_ = from.done_;
    }
    if (cached_has_bits & 0x00000004u) {
      action_ = from.action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExperienceBuffer_Experience::CopyFrom(const ExperienceBuffer_Experience& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atari_prediction.ExperienceBuffer.Experience)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExperienceBuffer_Experience::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ExperienceBuffer_Experience::InternalSwap(ExperienceBuffer_Experience* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sensor_reading_.InternalSwap(&other->sensor_reading_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExperienceBuffer_Experience, action_)
      + sizeof(ExperienceBuffer_Experience::action_)
      - PROTOBUF_FIELD_OFFSET(ExperienceBuffer_Experience, reward_)>(
          reinterpret_cast<char*>(&reward_),
          reinterpret_cast<char*>(&other->reward_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExperienceBuffer_Experience::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_experience_2eproto_getter, &descriptor_table_experience_2eproto_once,
      file_level_metadata_experience_2eproto[0]);
}

// ===================================================================

class ExperienceBuffer::_Internal {
 public:
  using HasBits = decltype(std::declval<ExperienceBuffer>()._has_bits_);
  static void set_has_enviroment_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_policy_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ExperienceBuffer::ExperienceBuffer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  experiences_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:atari_prediction.ExperienceBuffer)
}
ExperienceBuffer::ExperienceBuffer(const ExperienceBuffer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      experiences_(from.experiences_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enviroment_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    enviroment_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_enviroment_name()) {
    enviroment_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_enviroment_name(), 
      GetArenaForAllocation());
  }
  policy_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    policy_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_policy_type()) {
    policy_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_policy_type(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:atari_prediction.ExperienceBuffer)
}

inline void ExperienceBuffer::SharedCtor() {
enviroment_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  enviroment_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
policy_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  policy_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExperienceBuffer::~ExperienceBuffer() {
  // @@protoc_insertion_point(destructor:atari_prediction.ExperienceBuffer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExperienceBuffer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  enviroment_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  policy_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExperienceBuffer::ArenaDtor(void* object) {
  ExperienceBuffer* _this = reinterpret_cast< ExperienceBuffer* >(object);
  (void)_this;
}
void ExperienceBuffer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExperienceBuffer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExperienceBuffer::Clear() {
// @@protoc_insertion_point(message_clear_start:atari_prediction.ExperienceBuffer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  experiences_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      enviroment_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      policy_type_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExperienceBuffer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .atari_prediction.ExperienceBuffer.Experience experiences = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_experiences(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string enviroment_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_enviroment_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "atari_prediction.ExperienceBuffer.enviroment_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string policy_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_policy_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "atari_prediction.ExperienceBuffer.policy_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExperienceBuffer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atari_prediction.ExperienceBuffer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .atari_prediction.ExperienceBuffer.Experience experiences = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_experiences_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_experiences(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string enviroment_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enviroment_name().data(), static_cast<int>(this->_internal_enviroment_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "atari_prediction.ExperienceBuffer.enviroment_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_enviroment_name(), target);
  }

  // optional string policy_type = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_policy_type().data(), static_cast<int>(this->_internal_policy_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "atari_prediction.ExperienceBuffer.policy_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_policy_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atari_prediction.ExperienceBuffer)
  return target;
}

size_t ExperienceBuffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atari_prediction.ExperienceBuffer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .atari_prediction.ExperienceBuffer.Experience experiences = 1;
  total_size += 1UL * this->_internal_experiences_size();
  for (const auto& msg : this->experiences_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string enviroment_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_enviroment_name());
    }

    // optional string policy_type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_policy_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExperienceBuffer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExperienceBuffer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExperienceBuffer::GetClassData() const { return &_class_data_; }

void ExperienceBuffer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExperienceBuffer *>(to)->MergeFrom(
      static_cast<const ExperienceBuffer &>(from));
}


void ExperienceBuffer::MergeFrom(const ExperienceBuffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atari_prediction.ExperienceBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  experiences_.MergeFrom(from.experiences_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_enviroment_name(from._internal_enviroment_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_policy_type(from._internal_policy_type());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExperienceBuffer::CopyFrom(const ExperienceBuffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atari_prediction.ExperienceBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExperienceBuffer::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(experiences_))
    return false;
  return true;
}

void ExperienceBuffer::InternalSwap(ExperienceBuffer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  experiences_.InternalSwap(&other->experiences_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &enviroment_name_, lhs_arena,
      &other->enviroment_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &policy_type_, lhs_arena,
      &other->policy_type_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ExperienceBuffer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_experience_2eproto_getter, &descriptor_table_experience_2eproto_once,
      file_level_metadata_experience_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace atari_prediction
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::atari_prediction::ExperienceBuffer_Experience* Arena::CreateMaybeMessage< ::atari_prediction::ExperienceBuffer_Experience >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atari_prediction::ExperienceBuffer_Experience >(arena);
}
template<> PROTOBUF_NOINLINE ::atari_prediction::ExperienceBuffer* Arena::CreateMaybeMessage< ::atari_prediction::ExperienceBuffer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atari_prediction::ExperienceBuffer >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
